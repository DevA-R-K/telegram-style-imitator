# bot.py

import logging
import os
import asyncio
from typing import Dict, Any, List, Tuple, Optional
import io
import string
from collections import Counter
import json

from aiogram import Bot, Dispatcher, types, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile, User
from aiogram.enums import ParseMode

from keyboards import get_main_kb, get_targets_kb, get_exit_kb, get_back_to_main_kb
from database import (
    init_db, save_messages, get_messages, clear_data,
    get_style_data_from_db, get_stats_data, sqlite3 as db_sqlite3
)
from html_parser import parse_html
from style_analysis import analyze_style
from ai import generate_response
import profile_management


from config import BOT_TOKEN

MIN_SAMPLES_FOR_STYLE_ANALYSIS = 3
MIN_SAMPLES_FOR_IMITATION = 5


bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


user_states: Dict[int, Dict[str, Any]] = {}
chat_memory: Dict[int, Dict[str, List[Dict[str, str]]]] = {}


try:
    conn, cursor = init_db()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
except db_sqlite3.Error as e:
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
    exit(1)


@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è.\n"
        "–ó–∞–≥—Ä—É–∑–∏ —ç–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è–º–∏:",
        reply_markup=get_main_kb()
    )

@dp.callback_query(F.data == "back")
async def back(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' (callback_data='back') user_id {user_id}")
    try:
        await callback.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_kb()
        )
    except TelegramBadRequest as e:
        if "message to edit not found" in str(e) or "query is too old" in str(e) or "there is no text in the message to edit" in str(e):
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 'back' (user_id {user_id}): {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.")
            try:
                await callback.message.delete()
            except Exception:
                pass
            await callback.message.answer(
                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_kb()
            )
        else:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ TelegramBadRequest –≤ 'back' (user_id {user_id}): {e}", exc_info=True)
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ.", show_alert=True)
    finally:
        await callback.answer()


@dp.callback_query(F.data == "imitate_other")
async def imitate_other(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?\n"
               "üìÅ - –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π.\n"
               "üë§ - –í—ã–±—Ä–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç", callback_data="upload_other")],
            [InlineKeyboardButton(text="üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏", callback_data="manage_profiles")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    )
    await callback.answer()

@dp.callback_query(F.data == "upload_other")
async def upload_other(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ.\n"
        "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ (–≤–∞—à –∏ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤) –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="imitate_other")
        ]])
    )
    await callback.answer()


@dp.message(F.document)
async def handle_document(message: Message):
    user: User = message.from_user
    user_id = user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç user_id {user_id} (@{user.username or 'no_username'}).")

    max_file_size = 20 * 1024 * 1024
    if not message.document:
        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id {user_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        return
    if message.document.file_size is None or message.document.file_size > max_file_size:
        await message.reply(f"‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 20MB –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω.")
        logger.warning(f"–§–∞–π–ª –æ—Ç user_id {user_id} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω: {message.document.file_size}")
        return
    if not message.document.file_name or not message.document.file_name.lower().endswith('.html'):
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ HTML-—ç–∫—Å–ø–æ—Ä—Ç –∏–∑ Telegram.")
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –æ—Ç user_id {user_id}: {message.document.file_name or 'No filename'}")
        return

    processing_message = await message.reply("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")

    file_path = f"user_data/export_{user_id}_{message.document.file_unique_id}.html"
    try:
        os.makedirs("user_data", exist_ok=True)
        file_info = await bot.get_file(message.document.file_id)
        await bot.download_file(file_info.file_path, file_path)
        logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {file_path}.")

        your_parsed_messages, other_participants_messages = parse_html(file_path)
        logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–ª–∞–¥–µ–ª—å—Ü–∞: {len(your_parsed_messages)}, –¥—Ä—É–≥–∏—Ö: {len(other_participants_messages)}.")

        your_name = user.first_name
        if user.last_name:
            your_name += f" {user.last_name}"
        if not your_name.strip() and user.username:
             your_name = user.username
        if not your_name.strip():
            your_name = f"User_{user_id}"
        logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–∏–∑ TG): '{your_name}' –¥–ª—è user_id {user_id}.")

        if not other_participants_messages and not your_parsed_messages:
            await processing_message.edit_text("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
            logger.warning(f"–í —Ñ–∞–π–ª–µ {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return

        style_data_me = None
        if your_parsed_messages:
            if len(your_parsed_messages) >= MIN_SAMPLES_FOR_STYLE_ANALYSIS:
                try:
                    style_data_me = analyze_style(your_parsed_messages)
                    logger.info(f"–°—Ç–∏–ª—å –¥–ª—è '{your_name}' (user_id {user_id}) –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è –¥–ª—è '{your_name}' (user_id {user_id}): {e}", exc_info=True)
                    await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à —Å—Ç–∏–ª—å ('{your_name}'), —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –±–µ–∑ —Å—Ç–∏–ª—è.")
            else:
                logger.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π ({len(your_parsed_messages)}) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–µ–≥–æ —Å—Ç–∏–ª—è ('{your_name}'), —Å–æ—Ö—Ä–∞–Ω—è—é –±–µ–∑ —Å—Ç–∏–ª—è.")

            save_messages(user_id, your_name, your_parsed_messages, style_data_me)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(your_parsed_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è target '{your_name}' (user_id {user_id}).")

        participants_to_choose = sorted(list({name for name, _ in other_participants_messages if name != "Unknown" and name}))
        saved_count_others = 0
        processed_others = 0
        for target_other in participants_to_choose:
             messages_other = [text for name, text in other_participants_messages if name == target_other]
             processed_others += 1
             if messages_other:
                  style_data_other = None
                  if len(messages_other) >= MIN_SAMPLES_FOR_STYLE_ANALYSIS:
                      try:
                          style_data_other = analyze_style(messages_other)
                          logger.info(f"–°—Ç–∏–ª—å –¥–ª—è '{target_other}' (user_id {user_id}) –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
                      except Exception as e:
                          logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è –¥–ª—è '{target_other}' (user_id {user_id}): {e}", exc_info=True)
                          await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å –¥–ª—è '{target_other}', —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –±–µ–∑ —Å—Ç–∏–ª—è.")
                  else:
                      logger.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π ({len(messages_other)}) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è '{target_other}' (user_id {user_id}), —Å–æ—Ö—Ä–∞–Ω—è—é –±–µ–∑ —Å—Ç–∏–ª—è.")

                  save_messages(user_id, target_other, messages_other, style_data_other)
                  logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(messages_other)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è target '{target_other}' (user_id {user_id}).")
                  saved_count_others += 1

        response_text = ""
        if your_parsed_messages:
            response_text += f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(your_parsed_messages)} –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π'.\n"
        else:
             response_text += "‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã/—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n"

        if saved_count_others > 0:
             response_text += f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ {saved_count_others} –ø—Ä–æ—Ñ–∏–ª–µ–π –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
             response_text += "üë• –í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ (–∏–∑ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö):"
             reply_markup_final = get_targets_kb(participants_to_choose)
             logger.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω –≤—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è user_id {user_id}: {participants_to_choose}")
        elif processed_others > 0:
             response_text += "ü§∑‚Äç‚ôÇÔ∏è –î—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞. –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –≤ –º–µ–Ω—é."
             reply_markup_final = get_main_kb()
             logger.info(f"–î—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è user_id {user_id}.")
        else:
            response_text += "ü§∑‚Äç‚ôÇÔ∏è –î—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            reply_markup_final = get_main_kb()
            logger.info(f"–î—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ñ–∞–π–ª–µ –¥–ª—è user_id {user_id}.")


        await processing_message.edit_text(
            response_text,
            reply_markup=reply_markup_final
        )

    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω '{file_path}' –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ user_id {user_id}.", exc_info=True)
        await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.", reply_markup=get_main_kb())
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ user_id {user_id}: {str(e)}", exc_info=True)
        try:
            await processing_message.edit_text( "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.", reply_markup=get_main_kb())
        except TelegramBadRequest:
             logger.error("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞.", exc_info=True)
             await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.", reply_markup=get_main_kb())
    finally:
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path} —É–¥–∞–ª–µ–Ω.")
            except OSError as remove_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {remove_error}")


@dp.callback_query(F.data == "stats")
async def stats(callback: types.CallbackQuery):
    user: User = callback.from_user
    user_id = user.id
    logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è user_id {user_id} (@{user.username or 'no_username'}).")
    stats_data = get_stats_data(user_id)

    if not stats_data:
        logger.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ user_id {user_id}.")
        await callback.message.edit_text("üìä –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=get_main_kb())
        await callback.answer()
        return

    user_identifier = user.username if user.username else f"user_{user_id}"
    logger.info(f"–§–æ—Ä–º–∏—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {user_identifier}.")

    output = io.StringIO()
    output.write(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_identifier}\n")
    output.write("====================================\n\n")

    total_profiles = len(stats_data)
    total_messages_all = 0
    output.write(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: {total_profiles}\n\n")

    translator = str.maketrans('', '', string.punctuation + '‚Äî¬´¬ª‚Äù‚Äú`‚Äò‚Äô')
    common_words_to_exclude = {
        '–≤', '–Ω–∞', '—Å', '–∏', '–Ω–µ', '—è', '—Ç—ã', '–æ–Ω', '–æ–Ω–∞', '–æ–Ω–æ', '–º—ã', '–≤—ã', '–æ–Ω–∏',
        '—á—Ç–æ', '–∫–∞–∫', '–∞', '–Ω—É', '–∂–µ', '—Ç–æ', '—ç—Ç–æ', '–≤–æ—Ç', '–±—ã', '–Ω–æ', '–∏–ª–∏', '–¥–∞',
        '–±–ª—è—Ç—å', '—Å—É–∫–∞', '–ø–∏–∑–¥–µ—Ü', '—Ö—É–π', '–µ–±–∞—Ç—å', '–±–ª—è', '—Ö—É–ª–∏', '–º–¥–∞', '–ø–æ–Ω', '–æ–∫–µ–π', '–æ–∫', '–Ω–∞—Ö—É–π', '–Ω–∏—Ö—É—è', '–µ–±–∞–Ω—ã–π', '–µ–ø—Ç–∞',
        '—á–µ', '–º–Ω–µ', '—Ç–µ–±–µ', '–µ–≥–æ', '–µ–µ', '–Ω–∞—Å', '–≤–∞—Å', '–∏—Ö', '–º–æ–π', '—Ç–≤–æ–π', '—Å–≤–æ–π', '—Å–µ–±–µ', '–º–µ–Ω—è', '—Ç–µ–±—è',
        '–∑–∞', '–ø–æ', '—É', '–∏–∑', '–¥–æ', '–æ—Ç', '–∫', '–ø—Ä–æ', '–¥–ª—è', '—Å–æ', '–ø–æ–¥', '–Ω–∞–¥', '–±–µ–∑',
        '–µ—Å–ª–∏', '–∫–æ–≥–¥–∞', '—Ç–æ–∂–µ', '—Ç–∞–∫', '–Ω–µ—Ç', '–¥–∞', '–µ—â–µ', '—É–∂–µ', '—Ç–∞–º', '—Ç—É—Ç', '–≤—Å–µ', '–≤—Å—ë', '–≤–æ–æ–±—â–µ', '–ø—Ä–æ—Å—Ç–æ', '—Ç–∏–ø–æ',
        '—ç—Ç–æ—Ç', '—ç—Ç–∞', '—ç—Ç–∏', '—Ç–æ—Ç', '—Ç–∞', '—Ç–µ', '–≥–¥–µ', '–∫—Ç–æ', '–∫–∞–∫–æ–π', '–∫–∞–∫–∞—è', '–∫–∞–∫–æ–µ', '–∫–∞–∫–∏–µ', '–∫–æ—Ç–æ—Ä—ã–π', '–∫–æ—Ç–æ—Ä–∞—è',
        '–æ', '–∂', '–±—ã', '–ª—å', '–ª–∏', '–∂–µ', '—Ä–∞–∑–≤–µ', '—Å–ø—Å', '–ø–∂', '—Ö–∑', '–ª–æ–ª'
    }

    for target, messages in stats_data.items():
        message_count = len(messages)
        total_messages_all += message_count

        if message_count > 0:
            total_len = sum(len(str(msg)) for msg in messages)
            avg_len = round(total_len / message_count) if message_count > 0 else 0

            all_text = ' '.join(str(msg) for msg in messages).lower()
            cleaned_text = all_text.translate(translator)
            words = [word for word in cleaned_text.split() if len(word) > 1]
            word_counts = Counter(words)
            filtered_word_counts = Counter({word: count for word, count in word_counts.items() if word not in common_words_to_exclude})
            top_5_words = filtered_word_counts.most_common(5)
            top_words_str = ", ".join([f'"{word}" ({count})' for word, count in top_5_words]) if top_5_words else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)"
        else:
            avg_len = 0
            top_words_str = "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"

        output.write(f"--- –ü—Ä–æ—Ñ–∏–ª—å: {target} ---\n")
        output.write(f"–°–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {message_count}\n")
        output.write(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {avg_len} —Å–∏–º–≤.\n")
        output.write(f"–¢–æ–ø-5 —á–∞—Å—Ç—ã—Ö —Å–ª–æ–≤ (–±–µ–∑ —Å—Ç–æ–ø-—Å–ª–æ–≤, >1 –±—É–∫–≤—ã): {top_words_str}\n\n")

    output.write("====================================\n")
    output.write(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≤—Å–µ–º –ø—Ä–æ—Ñ–∏–ª—è–º: {total_messages_all}\n")

    txt_content = output.getvalue().encode('utf-8')
    txt_file = BufferedInputFile(txt_content, filename=f"stats_{user_identifier}.txt")

    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {txt_file.filename} –¥–ª—è user_id {user_id}.")
    try:
        await callback.message.answer_document(
            document=txt_file,
            caption=f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (@{user_identifier}) –≤ TXT",
            reply_markup=get_back_to_main_kb()
        )
        await callback.message.delete()
    except Exception as send_error:
         logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è user_id {user_id}: {send_error}", exc_info=True)
         await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
         return

    await callback.answer()


@dp.callback_query(F.data == "clear_data")
async def clear(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è user_id {user_id}.")
    await callback.message.edit_text(
        "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏ –¥–∞–Ω–Ω—ã–µ?\n"
        "‚ùóÔ∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data="clear_data_confirm")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back")]
        ])
    )
    await callback.answer()

@dp.callback_query(F.data == "clear_data_confirm")
async def clear_confirm(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ—á–∏—Å—Ç–∫—É –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö.")
    if clear_data(user_id):
        text = "üßπ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ—Ñ–∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã."
        if user_id in user_states:
            del user_states[user_id]
        if user_id in chat_memory:
            del chat_memory[user_id]
        logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã –¥–ª—è user_id {user_id}.")
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ."
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –¥–ª—è user_id {user_id}.")

    await callback.message.edit_text(
        text,
        reply_markup=get_main_kb()
    )
    await callback.answer("–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")


@dp.callback_query(F.data.startswith("target_"))
async def select_target(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        target_name = callback.data.split("_", 1)[1]
        if not target_name: raise IndexError("Empty target name")
    except IndexError:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è —Ü–µ–ª–∏ –∏–∑ callback_data –ø—Ä–∏ –≤—ã–±–æ—Ä–µ: {callback.data} –¥–ª—è user_id {user_id}")
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ü–µ–ª—å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏: {target_name}")

    target_messages = get_messages(user_id, target_name)
    style_data = get_style_data_from_db(user_id, target_name)

    if not target_messages:
        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è user_id={user_id}, target={target_name} –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–µ–ª–∏.")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {target_name}. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.", show_alert=True)
        return

    if len(target_messages) < MIN_SAMPLES_FOR_IMITATION:
        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ({len(target_messages)} < {MIN_SAMPLES_FOR_IMITATION}) —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ '{target_name}', user_id {user_id}.")
        await callback.answer(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ({len(target_messages)}/{MIN_SAMPLES_FOR_IMITATION}) –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å—Ç–∏–ª—è {target_name}. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.", show_alert=True)
        return

    if not style_data:
        logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∏–ª—è (style_data) –¥–ª—è user_id={user_id}, target={target_name}, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(target_messages)}. –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞—á–Ω–µ—Ç—Å—è –±–µ–∑ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è.")

    user_states[user_id] = {
        "imitating": True,
        "target": target_name,
        "style_samples": target_messages,
        "style_data": style_data,
        "response_cache": {}
    }
    if user_id in chat_memory:
        del chat_memory[user_id]
    logger.info(f"–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}, target={target_name}.")

    try:
        await callback.message.edit_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å **{target_name}**.\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏:",
            reply_markup=get_exit_kb(),
            parse_mode=ParseMode.MARKDOWN
        )
    except TelegramBadRequest as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ select_target (user_id {user_id}): {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.")
        await callback.message.answer(
             f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å **{target_name}**.\n"
             f"–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å:",
             parse_mode=ParseMode.MARKDOWN
            )
        await callback.message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—ã—Ö–æ–¥–∞.", reply_markup=get_exit_kb())

    await callback.answer()


@dp.callback_query(F.data == "exit_imitation")
async def exit_imitation_mode(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Ä–µ–∂–∏–º–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")

    if user_id in user_states:
        user_states[user_id]["imitating"] = False
        logger.info(f"–†–µ–∂–∏–º –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è user_id {user_id} –≤ user_states.")

    if user_id in chat_memory:
        del chat_memory[user_id]
        logger.info(f"–û—á–∏—â–µ–Ω–∞ –ø–∞–º—è—Ç—å —á–∞—Ç–∞ –¥–ª—è user_id {user_id}.")

    try:
       await callback.message.edit_text("–†–µ–∂–∏–º –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω.", reply_markup=None)
    except TelegramBadRequest as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ä–µ–∂–∏–º–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ (user_id {user_id}): {e}")
        await callback.message.answer("–†–µ–∂–∏–º –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω.")

    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_kb())
    await callback.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∏–º–∏—Ç–∞—Ü–∏–∏.")


@dp.message(F.text)
async def text(message: Message):
    user: User = message.from_user
    user_id = user.id
    user_state = user_states.get(user_id, {})

    if user_state.get("imitating"):
        target = user_state.get("target")
        style_samples = user_state.get("style_samples", [])

        if target and style_samples:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –∏–º–∏—Ç–∞—Ü–∏–∏ '{target}': '{message.text[:50]}...'")

            if len(style_samples) < MIN_SAMPLES_FOR_IMITATION:
                logger.error(f"State inconsistency: Imitating mode active but samples < {MIN_SAMPLES_FOR_IMITATION} for user_id {user_id}, target '{target}'.")
                user_states[user_id]["imitating"] = False
                if user_id in chat_memory: del chat_memory[user_id]
                await message.reply(
                     f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ {target}. –†–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω.",
                     reply_markup=get_main_kb()
                 )
                return

            try:
                response = await generate_response(user_id, target, message.text, user_states, chat_memory)
                await message.reply(response, reply_markup=get_exit_kb())

                if user_id not in chat_memory:
                    chat_memory[user_id] = {"history": []}
                chat_memory[user_id]["history"].append({"role": "user", "content": message.text})
                chat_memory[user_id]["history"].append({"role": "assistant", "content": response})
                chat_memory[user_id]["history"] = chat_memory[user_id]["history"][-20:]
                logger.debug(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –¥–ª—è user_id {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –î–ª–∏–Ω–∞: {len(chat_memory[user_id]['history'])}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è user_id {user_id}, target '{target}': {str(e)}", exc_info=True)
                await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.", reply_markup=get_exit_kb())
        else:
             logger.error(f"–ù–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è user_id {user_id}: imitating=True, –Ω–æ –Ω–µ—Ç target –∏–ª–∏ style_samples –≤ user_states.")
             user_states[user_id]["imitating"] = False
             await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–º–∏—Ç–∞—Ü–∏–∏. –†–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω.", reply_markup=get_main_kb())

    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∏–º–∏—Ç–∞—Ü–∏–∏): '{message.text[:50]}...'")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:", reply_markup=get_main_kb())


async def main():
    dp.include_router(profile_management.profile_router)
    logger.info("–†–æ—É—Ç–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    os.makedirs("user_data", exist_ok=True)
    asyncio.run(main())
